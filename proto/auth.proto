syntax = "proto3";
package auth;

service Auth {
    rpc CreateAccount (IN__CreateAccount) returns (CreateAccount__OUT);
    rpc MagicLinkLogin (IN__MagicLinkLogin) returns (MagicLinkLogin__OUT);
    rpc ExtendConnection (IN__ExtendConnection) returns (ExtendConnection__OUT);
    rpc ListConnections (IN__ListConnections) returns (ListConnections__OUT);
    rpc CloseConnection (IN__CloseConnection) returns (CloseConnection__OUT);
    rpc ListPublicKeys (IN__ListPublicKeys) returns (ListPublicKeys__OUT);
}

message IN__CreateAccount {
    string email = 1;
}

message CreateAccount__OUT {
    int64 magicLinkValidTill = 1;
}

message DeviceInfo {
    string deviceName = 1;
    string browser = 2;
    string os = 3;
    string locale = 4;
    string ipAddress = 5;
}

message IN__MagicLinkLogin {
    string magicLinkContent = 1;
    DeviceInfo deviceInfo = 2;
}
 
message MagicLinkLogin__OUT {
    string accountId = 1;
    string masterToken = 2;
    string masterTokenPublicKeyId = 3;
    string secondaryToken = 4;
    string secondaryTokenPublicKeyId = 5;
}

message IN__ExtendConnection {
    string masterToken = 1;
    DeviceInfo deviceInfo = 2;
}
 
message ExtendConnection__OUT {
    string secondaryToken = 1;
    string secondaryTokenPublicKeyId = 2;
}

message IN__ListConnections {
    repeated string accountIds = 1;
}

enum ConnectionState {
    Open = 0;
    Closed = 1;
}

message Connection {
    string connectionId = 1;
    string accountId = 2;
    int64 createdAt = 3;
    int64 expiresAt = 4;
    string masterTokenPublicKeyId = 5;
    ConnectionState connectionState = 6;
    DeviceInfo deviceInfo = 7;
}

message ListConnections__OUT {
    repeated Connection connection = 1;
}

message IN__CloseConnection {
    string connectionId = 1;
    string masterToken = 2;
}

message CloseConnection__OUT {
    ConnectionState connectionState = 1; 
}

message IN__ListPublicKeys {
    repeated string publicKeyIds = 1;
}

message PublicKeyInfo {
    string publicKeyId = 1;
    string publicKey = 2;
    int64 expiresAt = 3;
}

message ListPublicKeys__OUT {
    repeated PublicKeyInfo publicKeys = 1;
}